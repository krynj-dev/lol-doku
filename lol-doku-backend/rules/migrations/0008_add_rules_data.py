# Generated by Django 5.0.4 on 2024-05-03 01:42
import json, glob
from django.db import migrations, transaction, IntegrityError

def int_or_none(n):
    if n == '' or n is None:
        return None
    return int(n)

def load_rules(apps, schema_editor):
    missing_plr = set()
    TieredValidPlayers = apps.get_model("rules", "TieredValidPlayers")
    Rule = apps.get_model("rules", "Rule")
    Player = apps.get_model("players", "Player")
    data = None
    for fn in glob.glob('db_data/rules/rules_*.json'):
        try:
            with open(fn, 'r+', encoding='utf-8') as f:
                data = json.load(f)
        except:
            print(f'fnf: {fn}')
        if data is None:
            return
        for k in data.keys():
            rle = data[k]
            try:
                with transaction.atomic():
                    db_tvp = TieredValidPlayers.objects.create()
                    db_rle = Rule()
                    db_rle.key = rle['key']
                    db_rle.rule_type = rle['type']
                    db_rle.valid_players = db_tvp
                    for l in rle['valid_players'].keys():
                        for plr in rle['valid_players'][l]:
                            try:
                                db_plr = Player.objects.get(display_name=plr)
                                if l.lower() == 'primary':
                                    db_tvp.primary.add(db_plr)
                                elif l.lower() == 'secondary':
                                    db_tvp.secondary.add(db_plr)
                            except Player.DoesNotExist as e:
                                missing_plr.add(plr)
                    db_tvp.save()
                    db_rle.save()
            except IntegrityError:
                db_rle.delete()
                db_tvp.delete()
        print(f'finished {fn}')
    print(f"missing players {missing_plr}")

class Migration(migrations.Migration):

    dependencies = [
        ('rules', '0007_tieredvalidcrosses'),
    ]

    operations = [
        migrations.RunPython(load_rules)
    ]
