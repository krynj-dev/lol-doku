# Generated by Django 5.0.4 on 2024-05-11 07:58
import json
from django.db import migrations, transaction, IntegrityError

def load_crosses(apps, schema_editor):
    Rule = apps.get_model("rules", "Rule")
    ValidCrosses = apps.get_model("rules", "ValidCrosses")
    data = None
    with open("db_data/rules.json", 'r+', encoding='utf-8') as f:
        data = json.load(f)
    if data is None:
        return
    print("\n", end="")
    i = 1
    for k in data.keys():
        print(f"\rrule {i}/{len(data.keys())}", flush=True, sep="", end="")
        rle = data[k]
        try:
            with transaction.atomic():
                db_rle = Rule.objects.get(key=rle['key'])
                if 'valid_crosses' not in rle.keys():
                    continue
                for crs in rle['valid_crosses']:
                    try:
                        db_vc, created = ValidCrosses.objects.get_or_create(rule=db_rle)
                        db_vc.crosses.add(Rule.objects.get(key=crs))
                    except Rule.DoesNotExist as e:
                        print(f"missing cross: {crs}")
                db_vc.save()
                db_rle.save()
        except IntegrityError:
            pass
        i += 1

class Migration(migrations.Migration):

    dependencies = [
        ('rules', '0002_add_rules_data'),
    ]

    operations = [
        migrations.RunPython(load_crosses)
    ]
